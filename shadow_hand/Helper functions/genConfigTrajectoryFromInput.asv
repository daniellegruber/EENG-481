function [ds, qInterp] = genConfigTrajectoryFromInput(signSeq, prevConfig, jointNames)
nJoints = length(jointNames);

thumbUnderSigns = addLetterPrefix({'m', 'n', 't'});
thumbOverSigns = addLetterPrefix({'b','i', 'j', 'r','s', 'u', 'v', 'w', 'z'});
thumbOverSignUpFingers = {...
    {'LF', 'RF', 'MF', 'FF'}, ... % b
    {'LF'}, ... % i
    {'LF'}, ... % j
    {'MF', 'FF'}, ... % r
    {}, ... % s
    {'MF', 'FF'}, ... % u
    {'MF', 'FF'}, ... % v
    {'RF', 'MF', 'FF'}, ... % w
    {'FF'} ... % z
    };

% Init qWaypoints, tWaypoints
nWaypoints = 0;
movingSigns = {'letter_j', 'letter_z'}; 
movingSignTWaypoints = {[0 0.5 1], [0 0.5 1 1.5]};
% for i = 1:length(signSeq)
%     % If moving sign, there are multiple waypoints
%     movingIdx = find(ismember(movingSigns, signSeq{i}));
%     if isempty(movingIdx)
%         nWaypoints = nWaypoints + 1;
%     else
%         nWaypoints = nWaypoints + length(movingSignTWaypoints{movingIdx});
%     end
%     % If sign with thumb inside, insert "intermediate" waypoint before next
%     % sign so that fingers don't cross
%     if i < length(signSeq) && ismember(signSeq{i}, thumbUnderSigns)
%         nWaypoints = nWaypoints + 1;
%     end
% end
% qWaypoints = zeros(nWaypoints + 1, nJoints);
% tWaypoints = zeros(nWaypoints + 1, 1);
nMax = 100;
qWaypoints = zeros(nMax, nJoints);
tWaypoints = zeros(nMax, 1);
qWaypoints(1, :) = prevConfig; % first config is starting position

% Iterate over sign sequence
timeBetweenSigns = 1.25;
waypointEndIdx = 1;
for i = 1:length(signSeq)
    sign_name = signSeq{i};
    load(['Configs', filesep, sign_name, '.mat'], 'jointValues');
    jointDim = find(size(jointValues) == length(jointNames));
    if jointDim ~= 2
        jointValues = jointValues';
    end
    
    % Update tWaypoints
    waypointStartIdx = waypointEndIdx  + 1;
   
    movingIdx = find(ismember(movingSigns, signSeq{i}));
    % loadIntermediateFlag = i > 1 && ( ...
    %     ismember(signSeq{i-1}, thumbUnderSigns) || ...
    %     (ismember(signSeq{i-1}, thumbOverSigns) && ismember(signSeq{i}, thumbUnderSigns)) || ...
    %     (ismember(signSeq{i-1}, thumbUnderSigns) && ismember(signSeq{i}, thumbOverSigns)) ...
    %     );
    
    % loadIntermediateFlag = ismember(signSeq{i}, thumbUnderSigns) || ...
    %     (i < length(signSeq) && ismember(signSeq{i+1}, thumbUnderSigns));

    % loadIntermediateFlag = i < length(signSeq) && ...
    %     (ismember(signSeq{i}, thumbUnderSigns) || ismember(signSeq{i+1}, thumbUnderSigns));

    underToOverFlag = 0;
    toUnderFlag = 0;
    overToOverFlag = 0;
    if i < length(signSeq)
        if ismember(signSeq{i}, thumbUnderSigns) && ~ismember(signSeq{i+1}, thumbUnderSigns)
            underToOverFlag = 1;
        elseif ismember(signSeq{i+1}, thumbUnderSigns)
            toUnderFlag = 1;
        end
        if ismember(signSeq{i}, thumbOverSigns) && ismember(signSeq{i+1}, thumbOverSigns)
            fingersUpCurr = thumbOverSignUpFingers{ismember(thumbOverSigns, signSeq{i})};
            fingersUpNext = thumbOverSignUpFingers{ismember(thumbOverSigns, signSeq{i+1})};
            diff1 = setdiff(fingersUpCurr, fingersUpNext);
            diff2 = setdiff(fingersUpNext, fingersUpCurr);
            diffFingers = [diff1, diff2];
            if any(ismember({'RF', 'MF', 'FF'}, diffFingers))
                overToOverFlag = 1;
            end
        end
    end

    % Moving sign
    if ~isempty(movingIdx) 
        tPoints = movingSignTWaypoints{movingIdx};
    % Need to load intermediate waypoint to avoid fingers crossing
    elseif (underToOverFlag || toUnderFlag || overToOverFlag)
        tPoints = [0, 1]; % intermediate sign lasts for 1s
    else 
        tPoints = 0;
    end

    waypointEndIdx = waypointStartIdx + length(tPoints) - 1;
    tWaypoints(waypointStartIdx:waypointEndIdx) = tWaypoints(waypointStartIdx-1) + timeBetweenSigns + tPoints;

    % If repeated letter, slide to right or left depending on hand
    if i > 1 && strcmp(signSeq{i}, signSeq{i-1})
        slideJointIdx = ismember(jointNames, 'ARMJ2');
        jointValues(:, slideJointIdx) = 0.1;
    end

    % If previous letter had thumb inside, insert another waypoint to allow
    % fingers to move without cross
    if (underToOverFlag || toUnderFlag || overToOverFlag)
        jointValues2 = jointValues;
        if underToOverFlag
            load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
        elseif toUnderFlag
            load(['Configs', filesep, signSeq{i+1}, '_to_under.mat'], 'jointValues');
        elseif overToOverFlag
            load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
        end
        if jointDim ~= 2
            jointValues = jointValues';
        end
        %jointValues = [jointValues; jointValues2];
        jointValues = [jointValues2; jointValues];
    end

    % Update qWaypoints
    qWaypoints(waypointStartIdx:waypointEndIdx,:) = jointValues; 
end

qWaypoints = qWaypoints(1:waypointEndIdx, :);
tWaypoints = tWaypoints(1:waypointEndIdx, :);

Ts = 0.001; % sample time
tFinal = tWaypoints(end);

diff1 = abs(diff(qWaypoints, 1));
diff2 = abs(diff(wrapTo2Pi(qWaypoints), 1));
wrapTo2PiIdx = round(diff2, 4) < round(diff1, 4);
qWaypoints2 = qWaypoints(2:end, :);
qWaypoints2(wrapTo2PiIdx) = wrapTo2Pi(qWaypoints2(wrapTo2PiIdx));
qWaypoints2 = [qWaypoints(1,:); qWaypoints2];

qInterp = pchip(tWaypoints,qWaypoints2',0:Ts:tFinal);

ds = jointValuesToInputSignals(qInterp, jointNames, Ts, tFinal, '');

    
function signSeq = addLetterPrefix(letterCell)
    signSeq = cellfun(@(x) ['letter_', x], letterCell, 'UniformOutput', false);
end

end
function [ds, qInterp] = genConfigTrajectoryFromInput(signSeq, jointNames)
nJoints = length(jointNames);

thumbUnderSigns = addLetterPrefix({'m', 'n', 'p', 't'});
thumbOverSigns = addLetterPrefix({'b','i', 'j', 'k','r','s', 'u', 'v', 'w', 'z'});
thumbOverSignUpFingers = {...
    {'LF', 'RF', 'MF', 'FF'}, ... % b
    {'LF'}, ... % i
    {'LF'}, ... % j
    {'MF', 'FF'}, ... % k
    {'MF', 'FF'}, ... % r
    {}, ... % s
    {'MF', 'FF'}, ... % u
    {'MF', 'FF'}, ... % v
    {'RF', 'MF', 'FF'}, ... % w
    {'FF'} ... % z
    };

% Init qWaypoints, tWaypoints
movingSigns = {'letter_j', 'letter_z'}; 
movingSignTWaypoints = {[0 0.5 1], [0 0.5 1 1.5]};
nMax = 100;
qWaypoints = zeros(nMax, nJoints);
tWaypoints = zeros(nMax, 1);

% Iterate over sign sequence
timeBetweenSigns = 1.25;
waypointEndIdx = 0;
for i = 1:length(signSeq)
    sign_name = signSeq{i};
    load(['Configs', filesep, sign_name, '.mat'], 'jointValues');
    jointValues = correctJointValueDims(jointValues, nJoints);
    
    % Update tWaypoints
    waypointStartIdx = waypointEndIdx  + 1;
   
    movingIdx = find(ismember(movingSigns, signSeq{i}));

    underToOverFlag = 0;
    toUnderFlag = 0;
    overToOverFlag = 0;
    zFlag = 0;
    eFlag = 0;
    if i < length(signSeq)
        if ismember(signSeq{i}, thumbUnderSigns) && ~ismember(signSeq{i+1}, thumbUnderSigns)
            underToOverFlag = 1;
            if strcmp(signSeq{i+1}, 'letter_e')
                eFlag = 1;
            end
        elseif ismember(signSeq{i+1}, thumbUnderSigns)
            toUnderFlag = 1;
            if strcmp(signSeq{i}, 'letter_e')
                eFlag = 1;
            end
        elseif strcmp(signSeq{i}, 'letter_e') || strcmp(signSeq{i+1}, 'letter_e')
            eFlag = 1;
        end
        if ismember(signSeq{i}, thumbOverSigns) && ismember(signSeq{i+1}, thumbOverSigns)
            fingersUpCurr = thumbOverSignUpFingers{ismember(thumbOverSigns, signSeq{i})};
            fingersUpNext = thumbOverSignUpFingers{ismember(thumbOverSigns, signSeq{i+1})};
            diff1 = setdiff(fingersUpCurr, fingersUpNext);
            diff2 = setdiff(fingersUpNext, fingersUpCurr);
            diffFingers = [diff1, diff2];
            if any(ismember({'RF', 'MF', 'FF'}, diffFingers))
                overToOverFlag = 1;
            end
        end
        if strcmp(signSeq{i}, 'letter_z') && ~strcmp(signSeq{i+1}, 'letter_x')
            zFlag = 1;
        end
    end

    % Moving sign
    if ~isempty(movingIdx) 
        tPoints = movingSignTWaypoints{movingIdx};
        if zFlag 
            tPoints = [tPoints, tPoints(end) + 1];
        end
    % Need to load intermediate waypoint to avoid fingers crossing
    % elseif (underToOverFlag || toUnderFlag || overToOverFlag)
    %     tPoints = [0, 1]; % intermediate sign lasts for 1s
    %     if eFlag
    %         tPoints = [0, 1, 1.5];
    %     end
    elseif (underToOverFlag || toUnderFlag || overToOverFlag)
        tPoints = [0, 1]; % intermediate sign lasts for 1s
        if eFlag
            tPoints = [0, 1, 1.5];
        end
    elseif eFlag
        tPoints = [0, 1];
    else 
        tPoints = 0;
    end

    waypointEndIdx = waypointStartIdx + length(tPoints) - 1;
    if i == 1
        tWaypoints(waypointStartIdx:waypointEndIdx) = tPoints;
    else
        tWaypoints(waypointStartIdx:waypointEndIdx) = tWaypoints(waypointStartIdx-1) + timeBetweenSigns + tPoints;
    end

    % If repeated letter, slide to right or left depending on hand
    if i > 1 && strcmp(signSeq{i}, signSeq{i-1})
        slideJointIdx = ismember(jointNames, 'ARMJ2');
        jointValues(:, slideJointIdx) = 0.1;
    end

    % If previous letter had thumb inside, insert another waypoint to allow
    % fingers to move without cross
    if (underToOverFlag || toUnderFlag || overToOverFlag || zFlag || eFlag)
        jointValues2 = jointValues;
        if underToOverFlag || overToOverFlag || zFlag
            % load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
            % jointValues3 = correctJointValueDims(jointValues, nJoints);
            load(['Configs', filesep, signSeq{i}, '_to_under.mat'], 'jointValues');
            jointValues4 = correctJointValueDims(jointValues, nJoints);
            load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
            jointValues3 = [jointValues4; correctJointValueDims(jointValues, nJoints)];
            if eFlag
                load(['Configs', filesep, 'letter_e_intermediate.mat'], 'jointValues');
                jointValues = correctJointValueDims(jointValues, nJoints);
                jointValues3 = [jointValues3; jointValues];
            end  
        if underToOverFlag || overToOverFlag || zFlag
            % load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
            % jointValues3 = correctJointValueDims(jointValues, nJoints);
            load(['Configs', filesep, signSeq{i}, '_to_under.mat'], 'jointValues');
            jointValues4 = correctJointValueDims(jointValues, nJoints);
            load(['Configs', filesep, signSeq{i}, '_to_over.mat'], 'jointValues');
            jointValues3 = [jointValues4; correctJointValueDims(jointValues, nJoints)];
            if eFlag
                load(['Configs', filesep, 'letter_e_intermediate.mat'], 'jointValues');
                jointValues = correctJointValueDims(jointValues, nJoints);
                jointValues3 = [jointValues3; jointValues];
            end  
        elseif toUnderFlag
            load(['Configs', filesep, signSeq{i+1}, '_to_under.mat'], 'jointValues');
            jointValues3 = correctJointValueDims(jointValues, nJoints);
            if eFlag
                load(['Configs', filesep, 'letter_e_intermediate.mat'], 'jointValues');
                jointValues = correctJointValueDims(jointValues, nJoints);
                jointValues3 = [jointValues; jointValues3];
            end
        elseif eFlag
            load(['Configs', filesep, 'letter_e_intermediate.mat'], 'jointValues');
            jointValues3 = correctJointValueDims(jointValues, nJoints);
        end
        
        jointValues = [jointValues2; jointValues3];
    end

    % Update qWaypoints
    qWaypoints(waypointStartIdx:waypointEndIdx,:) = jointValues; 
end

qWaypoints = qWaypoints(1:waypointEndIdx, :);
tWaypoints = tWaypoints(1:waypointEndIdx, :);

Ts = 0.001; % sample time
tFinal = tWaypoints(end);

diff1 = abs(diff(qWaypoints, 1));
diff2 = abs(diff(wrapTo2Pi(qWaypoints), 1));
wrapTo2PiIdx = round(diff2, 4) < round(diff1, 4);
qWaypoints2 = qWaypoints(2:end, :);
qWaypoints2(wrapTo2PiIdx) = wrapTo2Pi(qWaypoints2(wrapTo2PiIdx));
qWaypoints2 = [qWaypoints(1,:); qWaypoints2];

qInterp = pchip(tWaypoints,qWaypoints2',0:Ts:tFinal);

ds = jointValuesToInputSignals(qInterp, jointNames, Ts, tFinal, '');

    
function signSeq = addLetterPrefix(letterCell)
    signSeq = cellfun(@(x) ['letter_', x], letterCell, 'UniformOutput', false);
end

function jointValues = correctJointValueDims(jointValues, nJoints)
    jointDim = find(size(jointValues) == nJoints);
    if jointDim ~= 2
        jointValues = jointValues';
    end
end

end